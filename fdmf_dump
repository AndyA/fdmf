#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use Storable;

my %Opt = (
  verbose => 0,
  files   => 0,
  db      => undef,
);

GetOptions(
  'verbose' => \$Opt{verbose},
  'files'   => \$Opt{files},
  'D|db:s'  => \$Opt{db},
) or usage( 1 );

die "The --db switch must be supplied\n" unless $Opt{db};
die "No $Opt{db}\n" unless -e $Opt{db};

my $db = retrieve $Opt{db};

my @files = keys %{ $db->{f} };
if ( @ARGV ) {
  my $like = qr{@{[ globs2re( @ARGV ) ]}};
  @files = grep { $_ =~ $like } @files;
}

if ( $Opt{files} ) {
  print "$_\n" for sort @files;
}
else {
  my %seen = ();
  print "$_\n"
   for sort grep { defined && !$seen{$_}++ }
   @{ $db->{h} }{ @{ $db->{i} }{ @{ $db->{f} }{@files} } };
}

sub usage {
  my $rc = shift;
  print STDERR "Usage: fdmf_dump --db db\n";
  exit $rc if defined $rc;
}

sub globs2re {
  join '', '(?:', join( ')|(?:', map { glob2re( $_ ) } @_ ), ')';
}

sub glob2re {
  my $glob   = shift;
  my $anchor = '';
  my @part   = ();
  while () {
    if ( $glob =~ /\G([\\\/])/gc ) {
      push @part, quotemeta $1;
      $anchor = '^';
      next;
    }
    if ( $glob =~ /\G\*\*/gc ) { push @part, '.*';         next }
    if ( $glob =~ /\G\*/gc )   { push @part, '[^\\/]*';    next }
    if ( $glob =~ /\G\?/gc )   { push @part, '.';          next }
    if ( $glob =~ /\G(.)/gc )  { push @part, quotemeta $1; next }
    last;
  }
  return join '', $anchor, @part, '$';
}

# vim:ts=2:sw=2:sts=2:et:ft=perl
